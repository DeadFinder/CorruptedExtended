name: Auto Debug from mod.json

on:
  push:
    branches:
      - debug
    paths:
      - 'mod.json'

jobs:
  debug:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Полная история для работы с тегами

    - name: Install jq and gnupg
      run: sudo apt-get update && sudo apt-get install -y jq gnupg

    - name: Read version and modname from mod.json
      id: get_mod_info
      run: |
        if [ ! -f mod.json ]; then
          echo "Error: mod.json not found"
          exit 1
        fi
        VERSION=$(jq -r '.modbuild' mod.json)
        if [ -z "$VERSION" ]; then
          echo "Error: modbuild is empty or not found in mod.json"
          exit 1
        fi
        MODNAME="CorruptedExtended_Debug"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "MODNAME=$MODNAME" >> $GITHUB_ENV
        echo "Read mod.json: MODNAME=$MODNAME, VERSION=$VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "Debug_${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "Tag Debug_${{ env.VERSION }} already exists, skipping release creation."
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Import GPG key
      if: env.TAG_EXISTS == 'false'
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "Importing GPG key..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --no-tty --passphrase "$GPG_PASSPHRASE" --import || { echo "Failed to import GPG key"; exit 1; }
        echo "Listing imported keys..."
        gpg --list-secret-keys --keyid-format=long

    - name: Configure GPG for non-interactive signing
      if: env.TAG_EXISTS == 'false'
      run: |
        echo "no-tty" > ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" > ~/.gnupg/gpg-agent.conf

    - name: Create and push signed tag
      if: env.TAG_EXISTS == 'false'
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git config user.signingkey "$GPG_KEY_ID"
        git config gpg.program gpg
        echo "Creating signed tag Debug_${{ env.VERSION }}"
        echo "$GPG_PASSPHRASE" | gpg --batch --yes --no-tty --passphrase-fd 0 --pinentry-mode loopback --sign -o /dev/null /dev/null || { echo "GPG test sign failed"; exit 1; }
        git tag -s Debug_${{ env.VERSION }} -m "Release Debug_${{ env.VERSION }}" || { echo "Failed to create signed tag"; exit 1; }
        echo "Pushing tag Debug_${{ env.VERSION }}"
        git push origin Debug_${{ env.VERSION }} || { echo "Failed to push tag"; exit 1; }

    - name: Create ZIP archive
      if: env.TAG_EXISTS == 'false'
      run: |
        echo "Creating ZIP archive: ${{ env.MODNAME }}_${{ env.VERSION }}.zip"
        git archive --format=zip --output=${{ env.MODNAME }}_${{ env.VERSION }}.zip HEAD

    - name: Create Debug Release
      id: create_debug
      if: env.TAG_EXISTS == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Debug_${{ env.VERSION }}
        release_name: Debug v${{ env.VERSION }}
        draft: false
        prerelease: true

    - name: Upload ZIP to Debug Release
      if: env.TAG_EXISTS == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_debug.outputs.upload_url }}
        asset_path: ./${{ env.MODNAME }}_${{ env.VERSION }}.zip
        asset_name: ${{ env.MODNAME }}_${{ env.VERSION }}.zip
        asset_content_type: application/zip